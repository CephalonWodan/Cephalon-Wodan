name: Update Warframe Public Export JSONs

on:
  schedule:
    - cron: "0 */6 * * *"   # toutes les 6h
  workflow_dispatch:        # lancement manuel

permissions:
  contents: write

concurrency:
  group: warframe-exports
  cancel-in-progress: false

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      LANG_CODE: en
      EXPORTS: |
        ExportCustoms_en.json
        ExportDrones_en.json
        ExportFlavour_en.json
        ExportFusionBundles_en.json
        ExportGear_en.json
        ExportKeys_en.json
        ExportRecipes_en.json
        ExportRegions_en.json
        ExportRelicArcane_en.json
        ExportResources_en.json
        ExportSentinels_en.json
        ExportSortieRewards_en.json
        ExportUpgrades_en.json
        ExportWarframes_en.json
        ExportWeapons_en.json

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -q requests

      - name: Fetch latest hashed URLs & download JSONs (origin index only)
        run: |
          python - <<'PY'
          import os, re, lzma, json, time, pathlib, sys, requests

          def get(url, timeout=60, tries=3):
            last = None
            for i in range(tries):
              try:
                r = requests.get(url, timeout=timeout, headers={"User-Agent":"github-actions/warframe-export"})
                r.raise_for_status()
                return r
              except Exception as e:
                last = e
                print(f"[retry {i+1}/{tries}] {url} -> {e}")
                time.sleep(1+i)
            raise last

          LANG = os.environ.get("LANG_CODE","en").strip()
          ORIGIN_INDEX = f"https://origin.warframe.com/PublicExport/index_{LANG}.txt.lzma"
          CONTENT_HTTP  = "http://content.warframe.com/PublicExport/Manifest/"
          CONTENT_HTTPS = "https://content.warframe.com/PublicExport/Manifest/"

          targets = [t.strip() for t in os.environ.get("EXPORTS","").splitlines() if t.strip()]
          out_dir = pathlib.Path("data"); out_dir.mkdir(parents=True, exist_ok=True)

          print(f"[*] Index (origin): {ORIGIN_INDEX}")
          try:
            idx_lz = get(ORIGIN_INDEX)
            idx_txt = lzma.decompress(idx_lz.content).decode("utf-8", errors="ignore")
            print("[✓] Index OK")
          except Exception as e:
            print(f"[×] Index origin KO: {e}")
            sys.exit(1)

          used, ok, missing = {}, 0, []

          for wanted in targets:
            if "!" in wanted:
              base, hashed = wanted.split("!",1)
            else:
              base = wanted
              m = re.search(rf"{re.escape(base)}![^\s]+", idx_txt)
              if not m:
                print(f"[!] Introuvable dans l'index: {base}")
                missing.append(base); continue
              hashed = m.group(0).split("!",1)[1]

            url_http  = CONTENT_HTTP  + base + "!" + hashed
            url_https = CONTENT_HTTPS + base + "!" + hashed
            out_path  = out_dir / base

            print(f"[*] {base} -> {url_http} (fallback HTTPS)")
            try:
              try:
                r = get(url_http, timeout=120)
              except Exception:
                r = get(url_https, timeout=120)
              out_path.write_text(r.text, encoding="utf-8")
              used[base] = {"url": r.url, "fetched_at": int(time.time())}
              ok += 1
            except Exception as e:
              print(f"[!] Erreur {base}: {e}")

          (out_dir / "_export_sources.json").write_text(json.dumps(used, indent=2, ensure_ascii=False), encoding="utf-8")

          if missing:
            print(f"[i] Non trouvés ({len(missing)}): " + ", ".join(missing))
          if ok == 0:
            print("[×] Aucun export mis à jour.")
            sys.exit(2)
          print(f"[✓] Exports mis à jour: {ok}")
          PY

      - name: Commit if changed
        run: |
          # 1) Tout ajouter d'abord, y compris les fichiers non suivis
          git add -A data/
          # 2) Vérifier le diff INDEX vs HEAD (ce qui est prêt à commit)
          if git diff --cached --quiet; then
            echo "Aucun changement."
          else
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit -m "chore: update PublicExport JSONs ($(date -u +'%Y-%m-%d %H:%M:%S UTC'))"
            git push
          fi
