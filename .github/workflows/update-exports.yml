name: Update Warframe Public Export JSONs

on:
  schedule:
    - cron: "0 */6 * * *"   # toutes les 6h
  workflow_dispatch:        # lancement manuel

permissions:
  contents: write

concurrency:
  group: warframe-exports
  cancel-in-progress: false

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      LANG_CODE: en
      EXPORTS: |
        ExportCustoms_en.json
        ExportDrones_en.json
        ExportFlavour_en.json
        ExportFusionBundles_en.json
        ExportGear_en.json
        ExportKeys_en.json
        ExportRecipes_en.json
        ExportRegions_en.json
        ExportRelicArcane_en.json
        ExportResources_en.json
        ExportSentinels_en.json
        ExportSortieRewards_en.json
        ExportUpgrades_en.json
        ExportWarframes_en.json
        ExportWeapons_en.json

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -q requests

      - name: Fetch latest hashed URLs & download JSONs (origin index)
        run: |
          python - <<'PY'
          import os, re, lzma, json, time, pathlib, sys, requests, traceback

          def get(url, timeout=60, tries=4):
            err = None
            for i in range(tries):
              try:
                print(f"[GET] {url} (try {i+1}/{tries})")
                r = requests.get(
                  url, timeout=timeout,
                  headers={
                    "User-Agent":"github-actions/warframe-export",
                    "Accept":"*/*",
                    "Accept-Encoding":"gzip, deflate, br",
                  })
                if r.status_code == 200:
                  return r
                err = Exception(f"HTTP {r.status_code}")
              except Exception as e:
                err = e
              time.sleep(1+i)   # small backoff
            raise err

          LANG = os.environ.get("LANG_CODE","en").strip()
          ORIGIN_INDEX = f"https://origin.warframe.com/PublicExport/index_{LANG}.txt.lzma"
          CONTENT_HTTP  = "http://content.warframe.com/PublicExport/Manifest/"
          CONTENT_HTTPS = "https://content.warframe.com/PublicExport/Manifest/"

          targets = [t.strip() for t in os.environ.get("EXPORTS","").splitlines() if t.strip()]
          out_dir = pathlib.Path("data"); out_dir.mkdir(parents=True, exist_ok=True)

          report = {"index_url": ORIGIN_INDEX, "files": [], "errors": []}

          try:
            idx_lz = get(ORIGIN_INDEX)
            idx_txt = lzma.decompress(idx_lz.content).decode("utf-8", errors="ignore")
            print("[✓] Index origin OK")
          except Exception as e:
            msg = f"Index origin KO: {e}"
            print("[×]", msg)
            report["errors"].append(msg)
            # on ne peut pas continuer sans index → on s'arrête proprement
            (out_dir / "_export_report.json").write_text(json.dumps(report, indent=2), encoding="utf-8")
            sys.exit(0)  # succès mou : pas de commit, mais workflow OK

          ok = 0
          for wanted in targets:
            if "!" in wanted:
              base, hashed = wanted.split("!",1)
            else:
              base = wanted
              m = re.search(rf"{re.escape(base)}![^\s]+", idx_txt)
              if not m:
                msg = f"Introuvable dans l'index: {base}"
                print("[!]", msg)
                report["errors"].append(msg)
                continue
              hashed = m.group(0).split("!",1)[1]

            url_http  = CONTENT_HTTP  + base + "!" + hashed
            url_https = CONTENT_HTTPS + base + "!" + hashed
            out_path  = out_dir / base

            try:
              try:
                r = get(url_http, timeout=120)
              except Exception as e_http:
                print(f"[i] HTTP fallback → HTTPS ({e_http})")
                r = get(url_https, timeout=120)

              out_path.write_text(r.text, encoding="utf-8")
              report["files"].append({"name": base, "url": r.url, "bytes": len(r.content)})
              ok += 1
            except Exception as e:
              tb = traceback.format_exc()
              msg = f"Erreur {base}: {e}"
              print("[!]", msg)
              print(tb)
              report["errors"].append(msg)

          (out_dir / "_export_report.json").write_text(json.dumps(report, indent=2), encoding="utf-8")

          print(f"[i] Résumé: téléchargés={ok}, erreurs={len(report['errors'])}")
          # ne pas échouer le job même si ok==0 → logs consultables
          PY

      - name: Commit if changed
        run: |
          git add -A data/
          if git diff --cached --quiet; then
            echo "Aucun changement à committer."
          else
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit -m "chore: update PublicExport JSONs ($(date -u +'%Y-%m-%d %H:%M:%S UTC'))"
            git push
          fi

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: warframe-export-report
          path: |
            data/_export_report.json
