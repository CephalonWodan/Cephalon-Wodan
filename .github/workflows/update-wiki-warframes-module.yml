name: Update Official Wiki (Warframes Module → JSON)

on:
  schedule:
    - cron: "17 */12 * * *"  # 2x/jour, décale par rapport à tes autres jobs
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: wiki-warframes-module
  cancel-in-progress: false

jobs:
  wiki_dump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure folders
        run: |
          mkdir -p tools data/wiki/modules data/wiki/json

      - name: Install Lua + Luarocks
        run: |
          sudo apt-get update
          sudo apt-get install -y lua5.3 liblua5.3-dev luarocks
          sudo luarocks install dkjson

      - name: Write tools/fetch_official_module.py
        run: |
          cat > tools/fetch_official_module.py <<'PY'
          #!/usr/bin/env python3
          import argparse, urllib.request, urllib.parse, time, random, pathlib, sys, html, xml.etree.ElementTree as ET, re
          BASE="https://wiki.warframe.com"
          HEADERS={
            "User-Agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0 Safari/537.36 Cephalon-Wodan/1.0",
            "Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Language":"en-US,en;q=0.8",
            "Referer":"https://wiki.warframe.com/"
          }
          def http_get(url, timeout=25, retries=4):
            for i in range(retries):
              try:
                req = urllib.request.Request(url, headers=HEADERS)
                with urllib.request.urlopen(req, timeout=timeout) as r:
                  return r.getcode(), r.read()
              except Exception:
                if i == retries-1: raise
                time.sleep(0.6 + i*0.7 + random.random()*0.4)

          def fetch_export(title:str):
            page = urllib.parse.quote(title, safe="")
            url  = f"{BASE}/wiki/Special:Export/{page}"
            code, data = http_get(url)
            # parse <text> from the MediaWiki XML export
            try:
              root = ET.fromstring(data)
              text = root.find(".//{http://www.mediawiki.org/xml/export-0.10/}text")
              if text is not None and text.text:
                return text.text.encode("utf-8")
            except Exception:
              pass
            return None

          def fetch_raw(title:str):
            q = urllib.parse.urlencode({"title": title, "action":"raw", "ctype":"text/plain"})
            url = f"{BASE}/w/index.php?{q}"
            try:
              code, data = http_get(url)
              if code == 200 and data: return data
            except Exception:
              pass
            return None

          def fetch_edit(title:str):
            q = urllib.parse.urlencode({"title": title, "action":"edit"})
            url = f"{BASE}/w/index.php?{q}"
            code, data = http_get(url)
            if code == 200 and data:
              m = re.search(r'<textarea[^>]*id=["\\']wpTextbox1["\\'][^>]*>([\\s\\S]*?)</textarea>', data.decode('utf-8','replace'), re.I)
              if m:
                return html.unescape(m.group(1)).encode("utf-8")
            return None

          def main():
            ap = argparse.ArgumentParser()
            ap.add_argument("--title", required=True)   # e.g. Module:Warframes/data
            ap.add_argument("--out",   required=True)   # path to .lua
            args = ap.parse_args()

            out = pathlib.Path(args.out)
            out.parent.mkdir(parents=True, exist_ok=True)

            data = fetch_export(args.title) or fetch_raw(args.title) or fetch_edit(args.title)
            if not data:
              print(f"[ERR] Unable to fetch {args.title}", file=sys.stderr)
              sys.exit(2)

            out.write_bytes(data)
            print(f"✓ Saved {args.title} -> {out} ({len(data)} bytes)")

          if __name__ == "__main__":
            main()
          PY
          chmod +x tools/fetch_official_module.py

      - name: Write tools/eval_lua_to_json.lua
        run: |
          cat > tools/eval_lua_to_json.lua <<'LUA'
          -- usage: lua tools/eval_lua_to_json.lua <module.lua> <out.json>
          local in_path  = arg[1]
          local out_path = arg[2] or (in_path .. ".json")

          local ok, dkjson = pcall(require, "dkjson")
          if not ok then io.stderr:write("dkjson not found\n"); os.exit(1) end

          local function sandbox_env()
            return {
              pairs=pairs, ipairs=ipairs, next=next,
              type=type, tostring=tostring, tonumber=tonumber,
              string=string, table=table, math=math
            }
          end

          local chunk, err = loadfile(in_path, "t", sandbox_env())
          if not chunk then io.stderr:write("load error: "..tostring(err).."\n"); os.exit(2) end

          local ok2, res = pcall(chunk)
          if not ok2 then io.stderr:write("run error: "..tostring(res).."\n"); os.exit(3) end
          if type(res) ~= "table" then io.stderr:write("module did not return a table\n"); os.exit(4) end

          local json = dkjson.encode(res, { indent = false })
          local f = assert(io.open(out_path, "w"))
          f:write(json)
          f:close()
          print("✓ wrote "..out_path)
          LUA

      - name: Fetch Module:Warframes/data (official wiki)
        run: |
          python3 tools/fetch_official_module.py \
            --title "Module:Warframes/data" \
            --out "data/wiki/modules/Module_Warframes_data.lua"

      - name: Evaluate → JSON (full dump)
        run: |
          lua tools/eval_lua_to_json.lua \
            data/wiki/modules/Module_Warframes_data.lua \
            data/wiki/json/warframes.module.json

      - name: Commit if changed
        run: |
          git add -A data/wiki/modules/Module_Warframes_data.lua data/wiki/json/warframes.module.json
          if git diff --cached --quiet; then
            echo "Aucun changement à committer."
          else
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit -m "chore: update official wiki Warframes module → JSON ($(date -u +'%Y-%m-%d %H:%M:%S UTC'))"
            git push
          fi
