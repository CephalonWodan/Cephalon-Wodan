import { WorldstateObject } from "./WorldstateObject-BSTYuZwm.js";
import { fromNow, timeDeltaToString } from "warframe-worldstate-data/utilities";

//#region lib/models/VallisCycle.ts
const lStart = /* @__PURE__ */ new Date("November 10, 2018 08:13:48 UTC");
const loopTime = 16e5;
const warmTime = 4e5;
const coldTime = loopTime - warmTime;
/**
* Get the current cycle state for Orb Vallis
* @returns current cycle state
*/
function getCurrentCycle() {
	const sinceLast = (Date.now() - lStart.getMilliseconds()) % loopTime;
	const toNextFull = loopTime - sinceLast;
	let state = "cold";
	if (toNextFull > coldTime) state = "warm";
	let toNextMinor;
	if (toNextFull < coldTime) toNextMinor = toNextFull;
	else toNextMinor = toNextFull - coldTime;
	const milliAtNext = Date.now() + toNextMinor;
	const milliAtPrev = Date.now() + toNextFull - (state === "warm" ? loopTime : coldTime);
	const timeAtPrevious = new Date(milliAtPrev);
	timeAtPrevious.setSeconds(0);
	return {
		state,
		toNextMinor,
		toNextFull,
		timeAtNext: new Date(milliAtNext),
		timeAtPrevious
	};
}
/**
* Represents the current Earth Day/Night Cycle
* @augments {WorldstateObject}
*/
var VallisCycle = class extends WorldstateObject {
	/**
	* Whether or not this it's daytime
	*/
	isWarm;
	/**
	* Current cycle state. One of `warm`, `cold`
	*/
	state;
	/**
	* The current cetus cycle, for calculating the other fields
	*/
	#ec = getCurrentCycle();
	constructor() {
		super({ _id: { $oid: "vallisCycle0" } });
		this.id = `vallisCycle${this.#ec.timeAtPrevious.getTime()}`;
		this.activation = this.#ec.timeAtPrevious;
		this.expiry = this.#ec.timeAtNext;
		this.isWarm = this.#ec.state === "warm";
		this.state = this.#ec.state;
	}
	/**
	* Whether this event has expired
	*/
	get expired() {
		return fromNow(this.expiry) < 0;
	}
	/**
	* Time remaining string
	*/
	get timeLeft() {
		return timeDeltaToString(this.#ec.toNextMinor);
	}
	get shortString() {
		return `${this.timeLeft.replace(/\s\d*s/gi, "")} to ${this.isWarm ? "Cold" : "Warm"}`;
	}
};

//#endregion
export { VallisCycle };