import { WorldstateObject } from "./WorldstateObject-BSTYuZwm.js";
import { languageString, node, parseDate, region } from "warframe-worldstate-data/utilities";

//#region lib/models/PersistentEnemy.ts
/**
* Represents a persistent enemy
* @augments {WorldstateObject}
*/
var PersistentEnemy = class extends WorldstateObject {
	/**
	* The enemy's type
	*/
	agentType;
	/**
	* The location tag
	*/
	locationTag;
	/**
	* The enemy's rank
	*/
	rank;
	/**
	* The enemy's remaining health percentage
	*/
	healthPercent;
	/**
	* The percentual damage that the enemy takes when it's defeated
	*/
	fleeDamage;
	/**
	* The region where the enemy is located
	*/
	region;
	/**
	* The last time the enemy was discovered
	*/
	lastDiscoveredTime;
	/**
	* The node at which the enemy was last discovered
	*/
	lastDiscoveredAt;
	/**
	* Whether or not the enemy is currently available
	*/
	isDiscovered;
	/**
	* Whether or not the enemy is using ticketing
	*/
	isUsingTicketing;
	/**
	* Fake ID incorporating discovery
	*/
	pid;
	/**
	* @param data        The persistent enemy data
	* @param deps        The dependencies object
	* @param deps.locale Locale to use for translations
	*/
	constructor(data, { locale } = { locale: "en" }) {
		super(data);
		this.agentType = languageString(data.AgentType, locale);
		this.locationTag = languageString(data.LocTag, locale);
		this.rank = data.Rank;
		this.healthPercent = Number.parseFloat(data.HealthPercent);
		this.fleeDamage = data.FleeDamage;
		this.region = region(data.Region, locale);
		this.lastDiscoveredTime = parseDate(data.LastDiscoveredTime);
		this.lastDiscoveredAt = node(data.LastDiscoveredLocation, locale);
		this.isDiscovered = data.Discovered;
		this.isUsingTicketing = data.UseTicketing;
		this.pid = `${this.id}${this.isDiscovered}`;
	}
};

//#endregion
export { PersistentEnemy };