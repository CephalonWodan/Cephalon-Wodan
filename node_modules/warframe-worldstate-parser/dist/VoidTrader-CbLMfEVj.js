import { WorldstateObject } from "./WorldstateObject-BSTYuZwm.js";
import { VoidTraderItem } from "./VoidTraderItem-BzeD-S6-.js";
import { VoidTraderSchedule } from "./VoidTraderSchedule-C-K8Zdfk.js";
import { fromNow, insist, node, parseDate, timeDeltaToString } from "warframe-worldstate-data/utilities";

//#region lib/models/VoidTrader.ts
/**
* Represents a void trader
* @augments {WorldstateObject}
*/
var VoidTrader = class extends WorldstateObject {
	/**
	* The void trader's name
	*/
	character;
	/**
	* The node at which the Void Trader appears
	*/
	location;
	/**
	* The trader's inventory
	*/
	inventory;
	/**
	* Pseudo Identifier for identifying changes in inventory
	*/
	psId;
	/**
	* The initial start date
	*/
	initialStart;
	/**
	* Whether it's completed or not
	*/
	completed;
	/**
	* Possible schedule
	*/
	schedule;
	/**
	* @param data        The Void trader data
	* @param deps        The dependencies object
	* @param deps.locale Locale to use for translations
	*/
	constructor(data, { locale = "en" } = { locale: "en" }) {
		super(data);
		insist({ ...data }, "Activation", "Expiry");
		this.character = data.Character ? data.Character.replace("Baro'Ki Teel", "Baro Ki'Teer") : "";
		this.location = node(data.Node, locale);
		this.inventory = data.Manifest ? data.Manifest.map((i) => new VoidTraderItem(i, { locale })) : [];
		this.psId = `${this.id}${this.inventory.length}`;
		this.initialStart = parseDate(data.InitialStartDate);
		this.completed = data.Completed;
		this.schedule = data.ScheduleInfo ? data.ScheduleInfo.map((i) => new VoidTraderSchedule(i, { locale })) : [];
	}
	/**
	* Whether the trader is active
	*/
	get active() {
		return fromNow(this.activation) < 0 && fromNow(this.expiry) > 0;
	}
	/**
	* Time delta string from now to the start
	*/
	get startString() {
		return timeDeltaToString(fromNow(this.activation));
	}
	/**
	* Time delta string from now to the end
	*/
	get endString() {
		return timeDeltaToString(fromNow(this.expiry));
	}
};

//#endregion
export { VoidTrader };