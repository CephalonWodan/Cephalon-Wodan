import { WorldstateObject } from "./WorldstateObject-BSTYuZwm.js";
import { languageString } from "warframe-worldstate-data/utilities";

//#region lib/models/SyndicateJob.ts
const apiBase = process.env.API_BASE_URL || "https://api.warframestat.us";
const bountyRewardRegex = /(?:Tier([ABCDE])|Narmer)Table([ABC])Rewards/i;
const ghoulRewardRegex = /GhoulBountyTable([AB])Rewards/i;
/**
* Determine the level string for the bounty
*/
const getLevelString = (job) => `${job.minEnemyLevel} - ${job.maxEnemyLevel}`;
const determineLocation = (i18n, raw, isVault) => {
	const last = String(i18n).split("/").slice(-1)[0];
	const bountyMatches = last.match(bountyRewardRegex);
	const ghoulMatches = last.match(ghoulRewardRegex);
	const isBounty = bountyMatches?.length;
	const isGhoul = ghoulMatches?.length;
	const isCetus = /eidolonjob/i.test(i18n);
	const isVallis = /venusjob/i.test(i18n);
	const isDeimos = /deimosmissionrewards/i.test(i18n);
	const rotation = isBounty ? bountyMatches[2] : "";
	const levelString = getLevelString(raw);
	let location;
	let levelClause;
	if (isCetus) {
		location = "Earth/Cetus ";
		if (isGhoul) levelClause = `(Level ${levelString} Ghoul Bounty)`;
		else levelClause = `(Level ${levelString} Cetus Bounty)`;
	}
	if (isVallis) {
		location = "Venus/Orb Vallis ";
		levelClause = `(Level ${levelString} Orb Vallis Bounty)`;
	}
	if (isDeimos) {
		location = "Deimos/Cambion Drift ";
		const variant = isVault ? "Isolation Vault" : "Cambion Drift Bounty";
		levelClause = `(Level ${levelString} ${variant})`;
	}
	const locationWRot = `${location}${levelClause}, Rot ${rotation.length ? rotation : "A"}`;
	return {
		location,
		locationWRot
	};
};
const getBountyRewards = async (i18n, raw, isVault) => {
	let location;
	let locationWRot;
	if (i18n.endsWith("PlagueStarTableRewards")) {
		location = "plague star";
		locationWRot = "Earth/Cetus (Level 15 - 25 Plague Star), Rot A";
	}
	if (!location || !locationWRot) ({location, locationWRot} = determineLocation(i18n, raw, isVault));
	const url = `${apiBase}/drops/search/${encodeURIComponent(location)}?grouped_by=location`;
	const reply = await fetch(url).then((res) => res.json()).catch(() => {});
	const pool = reply?.[locationWRot];
	if (!pool) return ["Pattern Mismatch. Results inaccurate."];
	const results = pool.rewards;
	if (results) return Array.from(new Set(results.map((result) => result.item)));
	return [];
};
const FIFTY_MINUTES = 3e6;
/**
* Represents a syndicate daily mission
* @augments {WorldstateObject}
*/
var SyndicateJob = class SyndicateJob extends WorldstateObject {
	/**
	* Array of strings describing rewards
	*/
	rewardPool;
	/**
	* The type of job this is
	*/
	type;
	/**
	* Array of enemy levels
	*/
	enemyLevels;
	/**
	* Array of standing gains per stage of job
	*/
	standingStages;
	/**
	* Minimum mastery required to participate
	*/
	minMR;
	/**
	* Whether or not this is a Vault job.
	* No indication for difference of normal vs arcana vaults.
	*/
	isVault;
	/**
	* Corresponding chamber. Nullable
	*/
	locationTag;
	/**
	* What time phase this bounty is bound to
	*/
	timeBound;
	/**
	* Generate a job with async data (reward pool)
	* @param data   The syndicate mission data
	* @param expiry The syndicate job expiration
	* @param deps   The dependencies object
	* @returns The created SyndicateJob object with rewardPool
	*/
	static async build(data, expiry, deps) {
		const job = new SyndicateJob(data, expiry, deps);
		job.rewardPool = await getBountyRewards(data.rewards, data, data.isVault);
		return job;
	}
	/**
	* Construct a job without async data (reward pool)
	* @param data        The syndicate mission data
	* @param expiry      The syndicate job expiration
	* @param deps        The dependencies object
	* @param deps.locale Locale to use for translations
	*
	* This DOES NOT populate the reward pool
	*/
	constructor(data, expiry, { locale } = { locale: "en" }) {
		super({ _id: { $oid: data.JobCurrentVersion ? data.JobCurrentVersion.$oid : `${(data.jobType || "").split("/").slice(-1)[0]}${expiry.getTime()}` } });
		this.rewardPool = [];
		const chamber = ((data.locationTag || "").match(/[A-Z]+(?![a-z])|[A-Z]?[a-z]+|\d+/g) || []).join(" ");
		this.type = data.isVault ? `Isolation Vault ${chamber}` : data.jobType ? languageString(data.jobType, locale) : void 0;
		this.enemyLevels = [data.minEnemyLevel, data.maxEnemyLevel];
		this.standingStages = data.xpAmounts;
		this.minMR = data.masteryReq || 0;
		this.isVault = data.isVault;
		this.locationTag = data.locationTag;
		this.expiry = expiry;
		const jobType = data.jobType ?? "";
		if (jobType.toLowerCase().includes("narmer")) if (jobType.toLowerCase().includes("eidolon")) {
			this.timeBound = "day";
			this.expiry = new Date(this.expiry.getTime() - FIFTY_MINUTES);
		} else this.timeBound = "night";
	}
};

//#endregion
export { SyndicateJob };