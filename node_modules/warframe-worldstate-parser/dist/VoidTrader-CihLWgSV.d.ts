import { Dependency } from "./Dependency-DkOHLql6.js";
import { BaseContentObject, WorldstateObject } from "./WorldstateObject-wfRTeGpm.js";
import { RawVoidTraderItem, VoidTraderItem } from "./VoidTraderItem-CkYAKAEn.js";
import { VoidTraderSchedule } from "./VoidTraderSchedule-DKDtu-9d.js";
import { ContentTimestamp } from "warframe-worldstate-data/utilities";

//#region lib/models/VoidTrader.d.ts
interface RawVoidTrader extends BaseContentObject {
  Character?: string;
  Node: string;
  Manifest: RawVoidTraderItem[];
  InitialStartDate: ContentTimestamp;
  Completed: boolean;
  ScheduleInfo: {
    Expiry: ContentTimestamp;
    FeaturedItem: string;
  }[];
}
/**
 * Represents a void trader
 * @augments {WorldstateObject}
 */
declare class VoidTrader extends WorldstateObject {
  /**
   * The void trader's name
   */
  character: string;
  /**
   * The node at which the Void Trader appears
   */
  location: string;
  /**
   * The trader's inventory
   */
  inventory: VoidTraderItem[];
  /**
   * Pseudo Identifier for identifying changes in inventory
   */
  psId: string;
  /**
   * The initial start date
   */
  initialStart: Date;
  /**
   * Whether it's completed or not
   */
  completed: boolean;
  /**
   * Possible schedule
   */
  schedule: VoidTraderSchedule[];
  /**
   * @param data        The Void trader data
   * @param deps        The dependencies object
   * @param deps.locale Locale to use for translations
   */
  constructor(data: RawVoidTrader, {
    locale
  }?: Dependency);
  /**
   * Whether the trader is active
   */
  get active(): boolean;
  /**
   * Time delta string from now to the start
   */
  get startString(): string;
  /**
   * Time delta string from now to the end
   */
  get endString(): string;
}
//#endregion
export { RawVoidTrader, VoidTrader };