import { Dependency } from "./Dependency-DkOHLql6.js";
import { RawReward, Reward } from "./Reward-5VIpHu9A.js";

//#region lib/models/Mission.d.ts
interface RawMission {
  descText: string;
  location: string;
  node?: string;
  missionType: string;
  faction: string;
  missionReward: RawReward;
  minEnemyLevel: number;
  maxEnemyLevel: number;
  maxWaveNum?: number;
  nightmare?: boolean;
  archwingRequired?: boolean;
  isSharkwingMission?: boolean;
  levelOverride: string;
  enemySpec: string;
  advancedSpawners?: string[];
  requiredItems?: string[];
  consumeRequiredItems?: boolean;
  vipAgent?: string;
  leadersAlwaysAllowed?: boolean;
  goalTag?: string;
  levelAuras?: string[];
  exclusiveWeapon: string;
}
/**
 * Represents an in-game mission
 */
declare class Mission {
  /**
   * The mission's description
   */
  description: string;
  /**
   * The node where the mission takes place
   */
  node: string;
  /**
   * Unlocalized node
   */
  nodeKey: string;
  /**
   * The mission's type
   */
  type: string;
  /**
   * The mission's type
   */
  typeKey: string;
  /**
   * The factions that the players must fight in the mission
   */
  faction: string;
  /**
   * The factions that the players must fight in the mission
   */
  factionKey: string;
  /**
   * The mission's reward
   */
  reward?: Reward;
  /**
   * The minimum level of the enemies in the mission
   */
  minEnemyLevel: number;
  /**
   * The maximum level of the enemies in the mission
   */
  maxEnemyLevel: number;
  /**
   * The number of waves that the players need to complete (undefined if not applicable)
   */
  maxWaveNum?: number;
  /**
   * The Mission's nightmare boolean
   */
  nightmare: boolean;
  /**
   * The Mission's archwing requirement
   */
  archwingRequired: boolean;
  /**
   * The Mission's sharkwing requirement
   */
  isSharkwing: boolean;
  /**
   * Override for the map on this mission
   */
  levelOverride: string;
  /**
   * Enemy specification for the mission
   */
  enemySpec: string;
  /**
   * Array of strings denoting extra spawners for a mission
   */
  advancedSpawners: string[];
  /**
   * Items required to enter the mission
   */
  requiredItems: string[];
  /**
   * Whether or not the required items are consumed
   */
  consumeRequiredItems?: boolean;
  /**
   * Target for the mission
   */
  target?: string;
  /**
   * Whether or not leaders are always allowed
   */
  leadersAlwaysAllowed?: boolean;
  /**
   * A tag for the event that this corresponds to
   */
  goalTag?: string;
  /**
   * Affectors for this mission
   */
  levelAuras: string[];
  /**
   * Only weapon allowed for the mission
   */
  exclusiveWeapon: string;
  /**
   * @param data   The mission data
   * @param locale Locale to use for translations
   */
  constructor(data: RawMission, {
    locale
  }?: Dependency);
}
//#endregion
export { Mission, RawMission };