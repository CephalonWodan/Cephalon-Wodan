import { WorldstateObject } from "./WorldstateObject-BSTYuZwm.js";
import { conclaveCategory, conclaveChallenge, conclaveMode, fromNow, parseDate, timeDeltaToString } from "warframe-worldstate-data/utilities";

//#region lib/models/ConclaveChallenge.ts
/**
* Represents a Conclave challenge
* @augments {WorldstateObject}
*/
var ConclaveChallenge = class extends WorldstateObject {
	/**
	* The number of times that the challenge's objective needs to be completed
	*/
	amount;
	/**
	* The PVP mode that the challenge must be completed in
	*/
	mode;
	/**
	* The challenge's category (daily, weekly...)
	*/
	category;
	/**
	* The challenge category unlocalized
	*/
	categoryKey;
	/**
	* The challenge's description text
	*/
	description;
	/**
	* Title of the challenge
	*/
	title;
	/**
	* Standing granted by completing challenge.
	*/
	standing;
	/**
	* Whether or not this is a daily conclave challenge.
	*/
	daily;
	/**
	* Whether or not this is the root challenge
	*/
	rootChallenge;
	/**
	* @param   {object}             data            The challenge data
	* @param   {object}             deps            The dependencies object
	* @param   {string}             deps.locale     Locale to use for translations
	*/
	constructor(data, { locale = "en" } = { locale: "en" }) {
		super(data);
		this.expiry = parseDate(data.endDate);
		this.activation = parseDate(data.startDate);
		this.amount = data.params[0].v;
		this.mode = conclaveMode(data.PVPMode, locale);
		this.category = conclaveCategory(data.Category, locale);
		this.categoryKey = conclaveCategory(data.Category, "en");
		this.daily = this.categoryKey.toLowerCase() === "day";
		this.rootChallenge = this.categoryKey.toLowerCase() === "week_root";
		const challenge = conclaveChallenge(data.challengeTypeRefID, locale);
		({title: this.title, description: this.description, standing: this.standing} = challenge);
	}
	/**
	* Whether or not this is expired (at time of object creation)
	*/
	get expired() {
		return fromNow(this.expiry) < 0;
	}
	/**
	* ETA string (at time of object creation)
	*/
	get eta() {
		const timeDelta = fromNow(this.expiry);
		return timeDeltaToString(timeDelta);
	}
};

//#endregion
export { ConclaveChallenge };