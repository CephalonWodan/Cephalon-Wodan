import { Archimedea } from "./Archidemea-DOh4trTM.js";
import { Kinepage } from "./Kinepage-CRRKVulq.js";
import { Dependency } from "./Dependency-DkOHLql6.js";
import { SentientOutpost } from "./SentientOutpost-DmlClvel.js";
import { BaseContentObject, WorldstateObject } from "./WorldstateObject-wfRTeGpm.js";
import { Alert, RawAlert } from "./Alert-JQT9Y8z0.js";
import { Calendar, RawCalender } from "./Calendar-CgEkm6e6.js";
import { CetusCycle } from "./CetusCycle-ooMM7hkg.js";
import { CambionCycle } from "./CambionCycle-uEBpbMim.js";
import { ConclaveChallenge, RawChallenge } from "./ConclaveChallenge-JbcEcL4s.js";
import { ConstructionProgress } from "./ConstructionProgress-FAySTEod.js";
import { DailyDeal, RawDailyDeal } from "./DailyDeal-Na-EaiFS.js";
import { DarkSector, RawDarkSector } from "./DarkSector-zkCUywz1.js";
import { RawChoice } from "./DuviriChoice-MIHsOBS7.js";
import { DuviriCycle } from "./DuviriCycle-B0zp0KxS.js";
import { EarthCycle } from "./EarthCycle-RELuZL01.js";
import { Fissure, RawFissure } from "./Fissure-Bj61i8dc.js";
import { FlashSale, RawFlashSale } from "./FlashSale-PDG4uQq4.js";
import { GlobalUpgrade, RawGlobalUpgrade } from "./GlobalUpgrade-BRQXf3JM.js";
import { Invasion, RawInvasion } from "./Invasion-izHXvygb.js";
import { MidrathCycle } from "./MidrathCycle-BfQtfG4p.js";
import { News, RawNews } from "./News-BfAgbYSY.js";
import { Nightwave, RawNightwave } from "./Nightwave-_0RzWikV.js";
import { PersistentEnemy, RawPersistentEnemy } from "./PersistentEnemy-DRcO4V2r.js";
import { LibraryInfo, Simaris } from "./Simaris-Bc-jNhED.js";
import { RawSortie, Sortie } from "./Sortie-DPv-7SQ-.js";
import { SteelPathOfferings } from "./SteelPathOffering-OHNTCFo5.js";
import { RawSyndicateMission, SyndicateMission } from "./SyndicateMission-DmGG5lGy.js";
import { VallisCycle } from "./VallisCycle-BXcmzqqG.js";
import { RawVoidTrader, VoidTrader } from "./VoidTrader-CihLWgSV.js";
import { RawWeeklyChallenge, WeeklyChallenge } from "./WeeklyChallenge-C6sc4j7i.js";
import { RawWorldEvent, WorldEvent } from "./WorldEvent-BS9QHG_f.js";
import { ZarimanCycle } from "./ZarimanCycle-CjNQXhVO.js";
import { ExternalMission } from "./ExternalMission-DCzJkPC8.js";

//#region lib/WorldState.d.ts

/**
 *
 * @param ParserClass class for parsing data
 * @param dataArray array of raw data
 * @param deps shared dependency object
 * @param uniqueField field to treat as unique
 * @returns  array of parsed objects
 */
declare function parseArray<T, D extends BaseContentObject>(
// Not all instances of T extend WorldstateObject
ParserClass: new (data: D, deps: Dependency) => T, dataArray: Array<D>, deps: Dependency, uniqueField?: keyof T): T[];
/**
 * Parse array of objects that requires async parsing
 * @param ParserClass class for parsing data - must expose a static build method
 * @param dataArray array of raw data
 * @param deps shared dependency object
 * @param uniqueField field to treat as unique
 * @returns array of parsed objects
 */
declare function parseAsyncArray<T extends WorldstateObject, D extends BaseContentObject>(ParserClass: {
  build: (data: D, deps: Dependency) => Promise<T>;
}, dataArray: Array<D>, deps: Dependency, uniqueField?: keyof T): Promise<T[]>;
interface InitialWorldState {
  Time: number;
  BuildLabel: string;
  Events: RawNews[];
  Goals: RawWorldEvent[];
  Alerts: RawAlert[];
  Sorties: RawSortie[];
  LiteSorties: RawSortie[];
  SyndicateMissions: RawSyndicateMission[];
  ActiveMissions: RawFissure[];
  VoidStorms: RawFissure[];
  GlobalUpgrades: RawGlobalUpgrade[];
  FlashSales: RawFlashSale[];
  Invasions: RawInvasion[];
  BadlandNodes: RawDarkSector[];
  VoidTraders: RawVoidTrader[];
  DailyDeals: RawDailyDeal[];
  LibraryInfo?: LibraryInfo;
  PVPChallengeInstances: RawChallenge[];
  PersistentEnemies: RawPersistentEnemy[];
  WeeklyChallenges?: RawWeeklyChallenge;
  ProjectPct: number[];
  SeasonInfo: RawNightwave;
  PrimeVaultTraders: RawVoidTrader[];
  EndlessXpChoices: RawChoice[];
  KnownCalendarSeasons: RawCalender[];
  Tmp: string;
}
/**
 * Parses Warframe Worldstate JSON
 */
declare class WorldState {
  /**
   * The date and time at which the World State was generated
   */
  timestamp: Date;
  /**
   * Current Warframe version
   */
  buildLabel: string;
  /**
   * The in-game news
   */
  news: News[];
  /**
   * The current events
   */
  events: WorldEvent[];
  /**
   * The current alerts
   */
  alerts: Alert[];
  /**
   * The current sortie
   */
  sortie: Sortie;
  /**
   * The current syndicate missions
   */
  syndicateMissions: SyndicateMission[];
  /**
   * The current fissures: 'ActiveMissions' & 'VoidStorms'
   */
  fissures: Fissure[];
  /**
   * The current global upgrades
   */
  globalUpgrades: GlobalUpgrade[];
  /**
   * The current flash sales
   */
  flashSales: FlashSale[];
  /**
   * The current invasions
   */
  invasions: Invasion[];
  /**
   * The state of the dark sectors
   */
  darkSectors: DarkSector[];
  /**
   * The state of all Void Traders
   */
  voidTraders: VoidTrader[];
  /**
   * The first entry for voidTraders
   * @deprecated
   */
  voidTrader: VoidTrader;
  /**
   * The current daily deals
   */
  dailyDeals: DailyDeal[];
  /**
   * The state of the sanctuary synthesis targets
   */
  simaris: Simaris;
  /**
   * The current conclave challenges
   */
  conclaveChallenges: ConclaveChallenge[];
  /**
   * The currently active persistent enemies
   */
  persistentEnemies: PersistentEnemy[];
  /**
   * The current earth cycle
   */
  earthCycle: EarthCycle;
  /**
   * The current Cetus cycle
   */
  cetusCycle: CetusCycle;
  /**
   * Cambion Drift Cycle
   */
  cambionCycle: CambionCycle;
  /**
   * The current Zariman cycle based off current time
   */
  zarimanCycle: ZarimanCycle;
  /**
   * Midrath cycle (soulframe)
   */
  midrathCycle: MidrathCycle;
  /**
   * Weekly challenges
   */
  weeklyChallenges?: WeeklyChallenge;
  /**
   * The Current construction progress for Fomorians/Razorback/etc.
   */
  constructionProgress: ConstructionProgress;
  /**
   * The current Orb Vallis cycle state
   */
  vallisCycle: VallisCycle;
  /**
   * The current nightwave season
   */
  nightwave?: Nightwave;
  /**
   * Kuva missions array
   */
  kuva?: ExternalMission[];
  /**
   * Arbitration mission
   */
  arbitration?: ExternalMission;
  /**
   * Current sentient outposts
   */
  sentientOutposts: SentientOutpost;
  /**
   * Steel path offering rotation
   */
  steelPath: SteelPathOfferings;
  /**
   * The current prime resurgence
   */
  vaultTrader: VoidTrader;
  /**
   * The current archon hunt
   */
  archonHunt: Sortie;
  /**
   * Current Duviri circuit choices
   */
  duviriCycle: DuviriCycle;
  /**
   * Current kinepage message
   */
  kinepage: Kinepage;
  /**
   * The current Deep Archimedea missions and modifiers
   */
  deepArchimedea?: Archimedea;
  /**
   * The current Temporal Archimedea missions and modifiers
   */
  temporalArchimedea?: Archimedea;
  /**
   * The current calendar for 1999
   */
  calendar: Calendar;
  /**
   * Generates the worldstate json as a string into usable objects
   */
  static build(json: string, deps?: Dependency): Promise<WorldState>;
  /**
   * @param data The worldstate JSON string
   * @param deps The options object
   */
  constructor(data: InitialWorldState, deps?: Dependency);
}
declare const _default: (json: string, deps: Dependency) => Promise<WorldState>;
//#endregion
export { InitialWorldState, WorldState, _default, parseArray, parseAsyncArray };