import { Dependency } from "./Dependency-DkOHLql6.js";
import { RawReward, Reward } from "./Reward-5VIpHu9A.js";
import { BaseContentObject, WorldstateObject } from "./WorldstateObject-wfRTeGpm.js";
import { ContentTimestamp } from "warframe-worldstate-data/utilities";

//#region lib/models/Invasion.d.ts
interface RawInvasion extends BaseContentObject {
  Node: string;
  LocTag: string;
  DefenderMissionInfo: {
    faction: string;
  };
  AttackerReward: RawReward;
  DefenderReward: RawReward;
  AttackerMissionInfo: {
    faction: string;
  };
  Activation: ContentTimestamp;
  Count: number;
  Goal: number;
  Completed: boolean;
}
/**
 * An invasion participant
 */
interface InvasionParticipant {
  /**
   * Reward for supporting this participant in the invasion
   */
  reward?: Reward;
  /**
   * Faction of this participant (localized)
   */
  faction: string;
  /**
   *  Faction of this participant (always English)
   */
  factionKey: string;
}
/**
 * Represents an invasion
 */
declare class Invasion extends WorldstateObject {
  /**
   * The node where the invasion is taking place
   */
  node: string;
  /**
   * The node key where the invasion is taking place
   */
  nodeKey: string;
  /**
   * The invasion's description
   */
  desc: string;
  /**
   * Invasion attacker
   */
  attacker: InvasionParticipant;
  /**
   * Invasion defender
   */
  defender: InvasionParticipant;
  /**
   * Whether this invasion is against the infestation
   */
  vsInfestation: boolean;
  /**
   * The signed count of completed runs. Supporting the attackers makes the count go up,
   * supporting the defenders makes it go down
   */
  count: number;
  /**
   * The number of runs that one side needs to win
   */
  requiredRuns: number;
  /**
   * The invasion's completion percentage. Defenders win if it gets to 0
   * Grineer vs. Corpus invasions start at 50, Infested invasions start at 100
   */
  completion: number;
  /**
   * Whether the invasion has finished
   */
  completed: boolean;
  /**
   * An array containing the types of all of the invasions's rewards
   */
  rewardTypes: string[];
  /**
   * @param   {object}             data            The invasion data
   * @param   {Dependency}         deps            The dependencies object
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data: RawInvasion, {
    locale
  }?: Dependency);
  /**
   * Whether or not the attackers are winning.
   * This is always false when the infestation is attacking
   */
  get isAttackerWinning(): boolean;
  /**
   * ETA string (at time of object creation)
   */
  get eta(): string;
  /**
   * Get an estimation of how much time is left before the invasion ends in milliseconds
   */
  private getRemainingTime;
}
//#endregion
export { Invasion, RawInvasion };