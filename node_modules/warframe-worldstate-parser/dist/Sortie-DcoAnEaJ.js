import { Mission } from "./Mission-ZuSsAYNm.js";
import { WorldstateObject } from "./WorldstateObject-BSTYuZwm.js";
import { SortieVariant } from "./SortieVariant-eWuI1uh9.js";
import wsData from "warframe-worldstate-data";
import { fromNow, languageString, parseDate, sortieBoss, sortieFaction, timeDeltaToString } from "warframe-worldstate-data/utilities";

//#region lib/models/Sortie.ts
const { sortie: sortieData } = wsData;
/**
* Represents a daily sortie
* @augments {WorldstateObject}
*/
var Sortie = class extends WorldstateObject {
	/**
	* The sortie's reward pool
	*/
	rewardPool;
	/**
	* The sortie's variants
	*/
	variants;
	/**
	* Archon hunt missions if sortie is an archon hunt
	*/
	missions;
	/**
	* The sortie's boss
	*/
	boss;
	/**
	* The sortie's faction
	*/
	faction;
	/**
	* The sortie's faction
	*/
	factionKey;
	/**
	* @param data        The data for all daily sorties
	* @param deps        The dependencies object
	* @param deps.locale Locale to use for translations
	*/
	constructor(data, { locale = "en" } = { locale: "en" }) {
		super(data);
		const opts = {
			sortieData,
			locale
		};
		this.activation = parseDate(data.Activation);
		this.expiry = parseDate(data.Expiry);
		this.rewardPool = languageString(data.Reward, locale);
		this.variants = (data.Variants ?? []).map((v) => new SortieVariant(v, opts));
		this.missions = (data.Missions ?? []).map((v) => new Mission(v, opts));
		this.boss = sortieBoss(data.Boss, locale);
		this.faction = sortieFaction(data.Boss, locale);
		this.factionKey = sortieFaction(data.Boss, "en");
	}
	/**
	* ETA string (at time of object creation)
	*/
	get eta() {
		return timeDeltaToString(fromNow(this.expiry));
	}
	/**
	* Whether this is expired (at time of object creation)
	*/
	get expired() {
		return fromNow(this.expiry) < 0;
	}
};

//#endregion
export { Sortie };