import { WorldstateObject } from "./WorldstateObject-BSTYuZwm.js";
import { NightwaveChallenge } from "./NightwaveChallenge-DwilvXfi.js";
import { fromNow, languageString, timeDeltaToString } from "warframe-worldstate-data/utilities";

//#region lib/models/Nightwave.ts
/**
* Represents an alert
* @augments {WorldstateObject}
*/
var Nightwave = class extends WorldstateObject {
	/**
	* The current season. 0-indexed.
	*/
	season;
	/**
	* Descriptor for affiliation
	*/
	tag;
	/**
	* The current season's current phase. 0-indexed.
	*/
	phase;
	/**
	* Misc params provided.
	*/
	params;
	/**
	* Array of possible challenges
	*/
	possibleChallenges;
	/**
	* Array of active challenges
	*/
	activeChallenges;
	/**
	* @param data        The alert data
	* @param deps        The dependencies object
	* @param deps.locale Locale to use for translations
	*/
	constructor(data, { locale } = { locale: "en" }) {
		super(data);
		const deps = { locale };
		this.id = `nightwave${new Date(this.expiry).getTime()}`;
		this.season = data.Season;
		this.tag = languageString(data.AffiliationTag, locale);
		this.phase = data.Phase;
		this.params = JSON.parse(data.Params || "{}");
		this.possibleChallenges = (data.Challenges || []).map((challenge) => new NightwaveChallenge(challenge, deps)).filter((challenge) => challenge);
		this.activeChallenges = (data.ActiveChallenges || []).map((challenge) => new NightwaveChallenge(challenge, deps)).filter((challenge) => challenge);
	}
	/**
	* How much time is left before the nightwave expires
	*/
	get eta() {
		return timeDeltaToString(fromNow(this.expiry));
	}
};

//#endregion
export { Nightwave };