import { Mission } from "./Mission-ZuSsAYNm.js";
import { WorldstateObject } from "./WorldstateObject-BSTYuZwm.js";
import { DarkSectorBattle } from "./DarkSectorBattle-5PyUPhxY.js";
import { languageString, parseDate } from "warframe-worldstate-data/utilities";

//#region lib/models/DarkSector.ts
/**
* Represents a dark sector
* @augments {WorldstateObject}
*/
var DarkSector = class extends WorldstateObject {
	/**
	* The dark sector credit tax rate
	*/
	creditTaxRate;
	/**
	* The dark sector credit tax rate for clan/alliance members
	*/
	memberCreditsTaxRate;
	/**
	* The dark sector resource tax rate
	*/
	itemsTaxRate;
	/**
	* The dark sector resource tax rate for clan/alliance members
	*/
	memberItemsTaxRate;
	/**
	* Whether the dark sector holder is an alliance or not
	*/
	isAlliance;
	/**
	* The current holder of the dark sector
	*/
	defenderName;
	/**
	* The remaining health of the current solar rail
	*/
	defenderPoolRemaining;
	/**
	* The maximum health of the solar rail
	*/
	defenderMaxPool;
	/**
	* The date and time at which the rail was deployed
	*/
	defenderDeployemntActivation;
	/**
	* The solar rail type
	*/
	railType;
	/**
	* The MOTD set by the dark sector holder
	*/
	defenderMOTD;
	/**
	* The player who deployed the solar rail
	*/
	deployerName;
	/**
	* The clan of the player who deployed the solar rail
	*/
	deployerClan;
	defenderRailHealReserve;
	healRate;
	damagePerMission;
	/**
	* The dark sector's mission
	*/
	mission;
	battlePayReserve;
	/**
	* The battle pay per mission offered to players
	* @type {number}
	*/
	perMissionBattlePay;
	/**
	* The player who set the battle pay
	* @type {string}
	*/
	battlePaySetBy;
	/**
	* The clan of the player who set the battle pay
	* @type {string}
	*/
	battlePaySetByClan;
	/**
	* The player who changed the tax
	* @type {string}
	*/
	taxChangedBy;
	/**
	* The clan of the player who set the tax
	* @type {string}
	*/
	taxChangedByClan;
	/**
	* The history of the dark sector
	* @type {Array.<DarkSectorBattle>}
	*/
	history;
	/**
	* @param   {object}             data                  The dark sector data
	* @param   {object}             deps                  The dependencies object
	* @param   {string}             deps.locale           Locale to use for translations
	*/
	constructor(data, { locale = "en" } = { locale: "en" }) {
		super(data);
		const deps = { locale };
		this.creditTaxRate = data.DefenderInfo.CreditsTaxRate;
		this.memberCreditsTaxRate = data.DefenderInfo.MemberCreditsTax;
		this.itemsTaxRate = data.DefenderInfo.ItemsTaxRate;
		this.memberItemsTaxRate = data.DefenderInfo.MemberItemsTaxRate;
		this.isAlliance = data.DefenderInfo.IsAlliance;
		this.defenderName = data.DefenderInfo.Name;
		this.defenderPoolRemaining = Number.parseFloat(data.DefenderInfo.StrengthRemaining);
		this.defenderMaxPool = Number.parseFloat(data.DefenderInfo.MaxStrength);
		this.defenderDeployemntActivation = data.DefenderInfo.DeploymentActivationTime ? parseDate(data.DefenderInfo.DeploymentActivationTime) : 0;
		this.railType = languageString(data.DefenderInfo.RailType, locale);
		this.defenderMOTD = data.DefenderInfo.MOTD;
		this.deployerName = data.DefenderInfo.DeployerName;
		this.deployerClan = data.DefenderInfo.DeployerClan;
		this.defenderRailHealReserve = data.DefenderInfo.RailHealReserve;
		this.healRate = Number.parseFloat(data.DefenderInfo.healRate);
		this.damagePerMission = data.DefenderInfo.DamagePerMission;
		this.mission = data.DefenderInfo.MissionInfo ? new Mission(data.DefenderInfo.MissionInfo, deps) : void 0;
		this.battlePayReserve = data.DefenderInfo.BattlePayReserve;
		this.perMissionBattlePay = data.DefenderInfo.MissionBattlePay;
		this.battlePaySetBy = data.DefenderInfo.BattlePaySetBy;
		this.battlePaySetByClan = data.DefenderInfo.BattlePaySetByClan;
		this.taxChangedBy = data.DefenderInfo.TaxLastChangedBy;
		this.taxChangedByClan = data.DefenderInfo.TaxLastChangedByClan;
		this.history = data.History ? data.History.map((b) => new DarkSectorBattle(b)) : [];
	}
};

//#endregion
export { DarkSector };