import { Dependency } from "./Dependency-DkOHLql6.js";
import { RawReward, Reward } from "./Reward-5VIpHu9A.js";
import { BaseContentObject, Identifier, WorldstateObject } from "./WorldstateObject-wfRTeGpm.js";
import { RawSyndicateJob, SyndicateJob } from "./SyndicateJob-DOtXWjRF.js";
import { ContentTimestamp } from "warframe-worldstate-data/utilities";

//#region lib/models/WorldEvent.d.ts

/**
 * Interim step for an event reward system.
 */
interface InterimStep {
  goal: number;
  reward: Reward | undefined;
  winnerCount: number;
  message: object;
}
/**
 * Progress for one of multiple stages
 */
interface ProgressStep {
  type: string;
  progressAmt: number;
}
interface InterimRewardMessage {
  sender: string;
  subject: string;
  message: string;
  senderIcon: string;
  attachments: string;
}
interface RawWorldEvent extends BaseContentObject {
  Goal: number;
  Count?: number;
  GoalInterim?: string;
  GoalInterim2?: string;
  Faction?: string;
  Desc: string;
  ToolTip?: string;
  Node?: string;
  ConcurrentNodes?: string[] | undefined;
  VictimNode?: string;
  Fomorian?: string;
  ScoreLocTag?: string;
  HealthPct?: number;
  JobPreviousVersion?: Identifier;
  Reward?: RawReward;
  InterimRewards?: RawReward[];
  InterimRewardMessages?: InterimRewardMessage[];
  InterimGoals: number[];
  _interimWinnerCounts?: number[];
  IsMultiProgress?: boolean;
  Types?: string[];
  MultiProgress?: string[];
  ShowTotalAtEOM?: boolean;
  Personal: boolean;
  Community?: boolean;
  RegionDrops?: string[];
  ArchwingDrops?: string[];
  Metadata?: string;
  CompletionBonus?: number[];
  ScoreVar: string;
  AltExpiry?: ContentTimestamp;
  AltActivation?: ContentTimestamp;
  NextAltExpiry?: ContentTimestamp;
  NextAltActivation?: ContentTimestamp;
  JobAffiliationTag?: string;
  Tag: string;
  Jobs?: RawSyndicateJob[];
  PreviousJobs?: RawSyndicateJob[];
}
/**
 * Represents an in-game special event
 * @augments {WorldstateObject}
 */
declare class WorldEvent extends WorldstateObject {
  jobs: SyndicateJob[];
  previousJobs: SyndicateJob[];
  /**
   * The event's main score goal
   */
  maximumScore: number;
  /**
   * The current score on the event
   */
  currentScore: number;
  /**
   * The first intermediate score goal
   */
  smallInterval: number;
  /**
   * The second intermediate score goal
   */
  largeInterval: number;
  /**
   * The faction that the players must fight in the event
   */
  faction: string | undefined;
  /**
   * The description of the event
   */
  description: string;
  /**
   * Tooltip for the event
   */
  tooltip: string | undefined;
  /**
   * The node where the event takes place
   */
  node: string | undefined;
  /**
   * The other nodes where the event takes place
   */
  concurrentNodes: string[];
  /**
   * The victim node
   */
  victimNode: string | undefined;
  /**
   * The score description
   */
  scoreLocTag: string | undefined;
  /**
   * The event's rewards
   */
  rewards: Reward[];
  /**
   * Health remaining for the target
   */
  health: number | undefined;
  /**
   * Previous job id
   */
  previousId: string | undefined;
  /**
   * Array of steps
   */
  interimSteps: InterimStep[];
  /**
   * Progress Steps, if any are present
   */
  progressSteps: ProgressStep[];
  /**
   * Total of all MultiProgress
   */
  progressTotal?: number;
  /**
   * Whether to show the total score at the end of the mission
   */
  showTotalAtEndOfMission: boolean;
  /**
   * Whether the event is personal
   */
  isPersonal: boolean;
  /**
   * Whether the event is community
   */
  isCommunity: boolean;
  regionDrops: string[];
  /**
   * Archwing Drops in effect while this event is active
   */
  archwingDrops: string[];
  /**
   * Metadata provided by DE
   */
  metadata: object;
  /**
   * Bonuses given for completion
   */
  completionBonuses: number[];
  scoreVar: string;
  altExpiry: Date;
  altActivation: Date;
  nextAlt: {
    expiry: Date;
    activation: Date;
  };
  affiliatedWith?: string;
  /**
   * The event's tag
   */
  tag: string;
  victim?: string;
  /**
   * Asynchronously build a new WorldEvent
   * @param data The event data
   * @param deps The dependencies object
   * @returns The created WorldEvent object
   */
  static build(data: RawWorldEvent, deps: Dependency): Promise<WorldEvent>;
  /**
   * @param data The event data
   * @param deps The dependencies object
   */
  constructor(data: RawWorldEvent, {
    locale
  }?: Dependency);
  /**
   * Whether the event has expired
   */
  get expired(): boolean;
}
//#endregion
export { InterimRewardMessage, InterimStep, ProgressStep, RawWorldEvent, WorldEvent };