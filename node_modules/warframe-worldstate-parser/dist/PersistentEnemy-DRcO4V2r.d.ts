import { BaseContentObject, WorldstateObject } from "./WorldstateObject-wfRTeGpm.js";
import { Locale } from "warframe-worldstate-data";
import { ContentTimestamp } from "warframe-worldstate-data/utilities";

//#region lib/models/PersistentEnemy.d.ts
interface RawPersistentEnemy extends BaseContentObject {
  AgentType: string;
  LocTag: string;
  Rank: number;
  HealthPercent: string;
  FleeDamage: number;
  Region: number;
  LastDiscoveredTime: ContentTimestamp;
  LastDiscoveredLocation: string;
  Discovered: boolean;
  UseTicketing: boolean;
}
/**
 * Represents a persistent enemy
 * @augments {WorldstateObject}
 */
declare class PersistentEnemy extends WorldstateObject {
  /**
   * The enemy's type
   */
  agentType: string;
  /**
   * The location tag
   */
  locationTag: string;
  /**
   * The enemy's rank
   */
  rank: number;
  /**
   * The enemy's remaining health percentage
   */
  healthPercent: number;
  /**
   * The percentual damage that the enemy takes when it's defeated
   */
  fleeDamage: number;
  /**
   * The region where the enemy is located
   */
  region: string | number;
  /**
   * The last time the enemy was discovered
   */
  lastDiscoveredTime: Date;
  /**
   * The node at which the enemy was last discovered
   */
  lastDiscoveredAt: string;
  /**
   * Whether or not the enemy is currently available
   */
  isDiscovered: boolean;
  /**
   * Whether or not the enemy is using ticketing
   */
  isUsingTicketing: boolean;
  /**
   * Fake ID incorporating discovery
   */
  pid: string;
  /**
   * @param data        The persistent enemy data
   * @param deps        The dependencies object
   * @param deps.locale Locale to use for translations
   */
  constructor(data: RawPersistentEnemy, {
    locale
  }?: {
    locale: Locale;
  });
}
//#endregion
export { PersistentEnemy, RawPersistentEnemy };